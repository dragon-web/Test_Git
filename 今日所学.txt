产生死锁的四个条件
①互斥条件 ②不可剥夺条件 ③请求与保持条件 ④循环等待条件。

在Windows XP中，文件夹中可以包含文件也可以包含文件夹

内核态=核心态=系统态=管态


回溯法求全排列  二分  mac下brew

查找目录：find /（查找范围） -name '查找关键字' -type d
查找文件：find /（查找范围） -name 查找关键字 -print


（1）系统级安全管理的主要任务是不允许未经授权的用户进入系统，从而也放置了他人非法使用系统中各类资源（包括文件）。系统级管理的主要措施有注册与登陆。
（2）用户级安全管理是通过对所有用户分类和对指定用户分配访问权。不同的用户对不同文件设置不同的存取权限来实现。例如，在Unix系统中将用户分为文件主、组用户和其他用户。有的系统将用户分为超级用户、系统操作员和一般用户。
（3）目录级安全管理是为了保护系统中各种目录而设计的，它与用户权限无关。为保证目录的安全规定只有系统核心才具有写目录的权利。
（4）文件级安全管理是通过系统管理员或文件主对文件属性的设置来控制用户对文件的访问。是有效权限和文件属性的交集。


dns服务主配置文件  /etc/named.conf


yield（）暂时交出 cpu 控制权，从 running 状态转为 runnalbe 状态，但是仍有 可能被调度，
sleep（）线程指定休眠一段时间，wait（）在其他线程调用此对 象的 notify（）或 notifyAll（）方法时才能继续执行 线程中 sleep()方法和 yeild()方法的主要区别: 
1.sleep()方***给其他线程运行的机会,而不管其他线程的优先级,因此会给较 低优先级的线程运行的机会;
yeild()方法只会给优先 级相同的或者比自己高的线程运行的机会. 
2.sleep()方法声明抛出 InterruptionException 异常,而 yeild()方法没有声明 抛出任何异常. 
3.sleep()方法比 yeild()方法具有更高的可移植性. 
4.sleep()方法使线程进入阻塞状态,而 yeild()方法使线程进入就绪状态. 当前运行的线程可以调用另一个线程的 join()方法,
当前运行的线程将转到阻 塞状态,直到另一个线程运行结束,它才会恢复运行. join()有两种形式:
public void join()和 public void join(long timeout)可 以设置阻塞的时间

RIP协议允许一条路径最多只能包含15个路由器，距离等于16时相当于不可达
CLR：通用语言运行平台，为微软的.Net产品提供运行环境。 
LR的全称是公共语言运行库，读者可以把CLR理解为一个包含运行.NET程序的引擎和一堆符合公共语言基础结构的类库的集合。CLR是一个规范的实现，我们开发的几乎所有的.NET程序都基于CLR的类库来实现，
并且运行在CLR提供的运行引擎之上。所谓.NET框架，指的就是公共语言运行库。
公共语言基础（CLI）是微软公司向ECMA提交的一份语言和数据格式规范，CLR是目前为止唯一一个公共语言基础的实现版本。


CTS的全称是通用类型系统。
MSIL是将.NET程序编译成机器语言的一种过程。编译成的代码不专用于任何一种操作系统，它是一种介于高级语言和基于Inter的汇编语言。每当编译程序，编译器将源代码翻译成MSIL，它是一组可以有效地转换为本机代码且独立于CPU指令。

XML Web Service 是在 Internet 上进行分布式计算的基本构造块。开放的标准以及对用户和应用程序之间的通信和协作的关注产生了这样一种环境，
在这种环境下，XML Web Service 成为应用程序集成的平台。



LiamPayne8头像LiamPayne8
inode包含文件的元信息，具体来说有以下内容：

* 文件的字节数
* 文件拥有者的User ID
* 文件的Group ID
* 文件的读、写、执行权限
* 文件的时间戳，共有三个：ctime指inode上一次变动的时间，mtime指文件内容上一次变动的时间，atime指文件上一次打开的时间。
* 链接数，即有多少文件名指向这个inode
* 文件数据block的位置
至于为什么没有文件名，是因为由于inode号码与文件名分离，这种机制导致了一些Unix/Linux系统特有的现象。

复制代码
1
2
3
1. 有时，文件名包含特殊字符，无法正常删除。这时，直接删除inode节点，就能起到删除文件的作用。
2. 移动文件或重命名文件，只是改变文件名，不影响inode号码。
3. 打开一个文件以后，系统就以inode号码来识别这个文件，不再考虑文件名。因此，通常来说，系统无法从inode号码得知文件名。
发表于 2017-09-07 23:29:03


稀疏矩阵用三元组表示
每个非零元素占3*2=6个字节，共10个非零元素，需6*10 = 60 个字节；
此外，还一般要用三个整数来存储矩阵的行数、列数和总元素个数，又需要3*2 = 6个字节；


In fact is a git responsitity



